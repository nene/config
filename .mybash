#!/usr/bin/env bash
# Source this file from .bashrc

# The modification of shell prompt

# \a	this option will make the computer "Beep"
# \d	Displays the date in "Weekday Month Date"
# \h	Displays the hostname
# \H	It's just like \h but shows the complete hostname including the domain.
# \n	This will make the prompt move to the next line.
# \s	Displays the name of shell you are using.
# \t	Displays current time in 24-hour HH:MM:SS format
# \T	Displays current time in 12-hour HH:MM:SS format
# \@	Displays current time in 12-hour am/pm format
# \u	Displays the name of your user.
# \W	Displays the name of the current directory
# \w	Same as \W but it will also show you the complete directory.
# \!	Displays the number of the command in the history file
# \#	Displays the number of commands you have executed in the current shell.
# \$	This will display the character # if you have uid 0 (root) or else it will display an $
# \nnn	Displays the corresponding octal character nnn
# \j	Displays how many jobs the users currently has.

DEFAULT="\[\033[0m\]"
RED="\[\033[31m\]"
GREEN="\[\033[32m\]"
YELLOW="\[\033[0;33m\]"

function parse_git_branch {
  top=$(git rev-parse --show-toplevel 2> /dev/null)
  if [ "$top" != "/home/nene" ] && [ "$top" != "/Users/renesaarsoo" ]; then
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo "("${ref#refs/heads/}") "
  fi
}

function parse_hg_branch() {
  branch=$(hg branch 2> /dev/null)
  bookmark=$(hg bookmarks 2>/dev/null | awk '/\*/ {print $2}')
  if [ "${branch}${bookmark}" ]; then
    echo "($branch/$bookmark) "
  fi
}

# Creates a custom prompt containing: <supplied-string> <dir-name> <git/hg-branch> $
function create_PS1() {
  echo "${RED}$1 ${GREEN}\W ${YELLOW}\$(parse_git_branch)\$(parse_hg_branch)${GREEN}\$ ${DEFAULT}"
}

PS1=$(create_PS1 "nene@taxify")


# Exports
export LANG="et_EE.UTF-8"
export LC_CTYPE="et_EE.UTF-8"
export EDITOR=vim
export PAGER=less


# History settings
export HISTFILESIZE=20000
export HISTSIZE=1000
HISTCONTROL=ignoredups
shopt -s histappend

# Disable inlusion of extended attributes to TAR files in OS X.
export COPYFILE_DISABLE=true


# In case it's not already so
alias vi=vim

# colors for ls, etc.
if [[ `uname` == 'FreeBSD' ]]; then
    alias ls="ls -G"
    alias la="ls -a"
    alias ll="ls -lh"
elif [[ `uname` == 'Darwin' ]]; then
    alias ls="ls -G"
    alias la="ls -aG"
    alias ll="ls -lhG"
elif [[ `uname` == 'Linux' ]]; then
    eval `dircolors -b /etc/DIR_COLORS`
    alias ls="ls --color=auto"
    alias ll="ls --color -lh"
    alias la="ls --color -a"
fi

# Grepping
alias grep="grep --color"
alias egrep="egrep --color"
# Note the use of sed for quoting all filenames - otherwise we can't handle paths with spaces in them
alias jsgrep="find . -iname '*.js' | sed \"s/$/'/; s/^/'/;\" | xargs egrep --color"
alias rbgrep="find . -iname '*.rb' | sed \"s/$/'/; s/^/'/;\" | xargs egrep --color"
alias xmlgrep="find . -iname '*.xml' | sed \"s/$/'/; s/^/'/;\" | xargs egrep --color"
alias phpgrep="find . -iname '*.php' -or -iname '*.inc' | sed \"s/$/'/; s/^/'/;\" | xargs egrep --color"


